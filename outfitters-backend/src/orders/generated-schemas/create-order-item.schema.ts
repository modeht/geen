import * as v from 'valibot';

export const CreateOrderItemSchema = v.pipe(v.object({quantity: v.nullish(v.number()),
unitSalePrice: v.nullish(v.number()),
unitPurchasePrice: v.nullish(v.number()),
totalSalePrice: v.nullish(v.number()),
totalPurchasePrice: v.nullish(v.number()),
brandOrder: v.nullish(v.union([v.number(), v.object({totalSalePrice: v.nullish(v.number()),
totalPurchasePrice: v.nullish(v.number()),
shippingFees: v.nullish(v.number()),
rating: v.nullish(v.number()),
review: v.nullish(v.string()),
expectedDeliveryDate: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
acceptedAt: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
shippedAt: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
deliveredAt: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
cancelledAt: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
orderId: v.number(),
brandId: v.number()})])),
variant: v.nullish(v.union([v.number(), v.object({isArchived: v.boolean(),
stock: v.number(),
price: v.nullish(v.number()),
lastStockUpdate: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
sku: v.nullish(v.string()),
mainProductId: v.nullish(v.number())})])),
product: v.nullish(v.union([v.number(), v.object({isArchived: v.boolean(),
title: v.nullish(v.string()),
description: v.nullish(v.string()),
basePrice: v.nullish(v.number()),
sku: v.nullish(v.string()),
currency: v.nullish(v.string()),
stock: v.number(),
lastStockUpdate: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
isOutOfStock: v.boolean(),
isFeatured: v.boolean(),
deliveryEstimationInDays: v.number(),
brandId: v.nullish(v.number()),
categoryId: v.nullish(v.number()),
subCategoryId: v.nullish(v.number()),
averageRating: v.number(),
isSaved: v.boolean()})])),
appliedPromoCode: v.nullish(v.union([v.number(), v.object({deletedAt: v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp()),
code: v.string(),
title: v.string(),
minPurchaseAmount: v.nullish(v.number()),
perUserLimit: v.nullish(v.number()),
totalLimit: v.nullish(v.number()),
start: v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp()),
end: v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp()),
discountPercentage: v.number(),
brandId: v.number(),
shopperId: v.number(),
ussageCount: v.number(),
totalMoneyDeducted: v.number()})])),
appliedPromotions: v.nullish(v.union([v.array(v.number()), v.array(v.object({title: v.string(),
discountPercentage: v.number(),
minPurchaseAmount: v.nullish(v.number()),
start: v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp()),
end: v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp()),
isDeleted: v.boolean(),
seasonalPromotionId: v.nullish(v.number()),
brandId: v.number()}))])),
brandOrderId: v.number(),
productId: v.number(),
variantId: v.number(),
promoCodeId: v.number()}),v.metadata({brandOrder: 'BrandOrderEntity',
variant: 'ProductVariantEntity',
product: 'ProductEntity',
appliedPromoCode: 'PromoCodeEntity',
appliedPromotions: 'PromotionEntity'}))

export type TCreateOrderItemSchema = v.InferInput<typeof CreateOrderItemSchema>
