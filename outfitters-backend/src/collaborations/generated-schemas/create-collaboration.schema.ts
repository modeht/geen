import * as v from 'valibot';
import { CollaborationStatusEnum } from '<<pathToOriginal>>';

export const CreateCollaborationSchema = v.pipe(v.object({message: v.nullish(v.union([v.number(), v.object({readAt: v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp()),
content: v.nullish(v.string()),
reaction: v.nullish(v.string()),
fromId: v.number(),
toId: v.number(),
conversationId: v.number(),
collaborationId: v.nullish(v.number()),
postId: v.nullish(v.number()),
storyId: v.nullish(v.number()),
commentId: v.nullish(v.number()),
productId: v.nullish(v.number())})])),
brandProfile: v.nullish(v.union([v.number(), v.object({storeName: v.nullish(v.string()),
brandName: v.nullish(v.string()),
storeBio: v.nullish(v.string()),
website: v.nullish(v.string()),
isPublished: v.boolean(),
shippingCost: v.nullish(v.number()),
currency: v.nullish(v.string()),
brandManagerFullName: v.nullish(v.string()),
logoId: v.nullish(v.number()),
isFollowing: v.nullish(v.boolean()),
hasStory: v.nullish(v.boolean()),
followersCount: v.nullish(v.number()),
followingCount: v.nullish(v.number()),
postsCount: v.nullish(v.number())})])),
shopperProfile: v.nullish(v.union([v.number(), v.object({username: v.nullish(v.string()),
fullName: v.nullish(v.string()),
dateOfBirth: v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp()),
bio: v.string(),
onboardingStep: v.nullish(v.number()),
facebookProfileLink: v.nullish(v.string()),
instagramProfileLink: v.string(),
tiktokProfileLink: v.string(),
isOutfitter: v.boolean(),
isFollowing: v.nullish(v.boolean()),
hasStory: v.nullish(v.boolean()),
followersCount: v.nullish(v.number()),
followingCount: v.nullish(v.number()),
postsCount: v.nullish(v.number()),
brandsCount: v.nullish(v.number()),
engagementCount: v.nullish(v.number())})])),
notifications: v.nullish(v.union([v.array(v.number()), v.array(v.object({customContent: v.string(),
isRead: v.boolean(),
userId: v.number(),
collaborationId: v.number(),
commentId: v.number(),
promotionId: v.number(),
productId: v.number()}))])),
brandId: v.nullish(v.number()),
shopperId: v.nullish(v.number())}),v.metadata({message: 'MessageEntity',
brandProfile: 'BrandProfileEntity',
shopperProfile: 'ShopperProfileEntity',
notifications: 'NotificationEntity'}))

export type TCreateCollaborationSchema = v.InferInput<typeof CreateCollaborationSchema>
