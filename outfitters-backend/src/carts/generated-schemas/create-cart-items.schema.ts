import * as v from 'valibot';

export const CreateCartItemsSchema = v.pipe(v.object({quantity: v.nullish(v.number()),
cart: v.nullish(v.union([v.number(), v.object({promoCodeId: v.nullish(v.number()),
shopperId: v.nullish(v.number())})])),
product: v.nullish(v.union([v.number(), v.object({isArchived: v.boolean(),
title: v.nullish(v.string()),
description: v.nullish(v.string()),
basePrice: v.nullish(v.number()),
sku: v.nullish(v.string()),
currency: v.nullish(v.string()),
stock: v.number(),
lastStockUpdate: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
isOutOfStock: v.boolean(),
isFeatured: v.boolean(),
deliveryEstimationInDays: v.number(),
brandId: v.nullish(v.number()),
categoryId: v.nullish(v.number()),
subCategoryId: v.nullish(v.number()),
averageRating: v.number(),
isSaved: v.boolean()})])),
variant: v.nullish(v.union([v.number(), v.object({isArchived: v.boolean(),
stock: v.number(),
price: v.nullish(v.number()),
lastStockUpdate: v.nullish(v.pipe(v.string('Invalid type: Expected ISO timestamp string'), v.isoTimestamp())),
sku: v.nullish(v.string()),
mainProductId: v.nullish(v.number())})])),
affiliationLink: v.nullish(v.union([v.number(), v.object({isDisabled: v.boolean(),
url: v.string(),
productId: v.number(),
shopperId: v.number()})])),
cartId: v.number(),
productId: v.number(),
variantId: v.number(),
affiliationLinkId: v.number(),
totalPrice: v.number(),
totalDiscountedPrice: v.number(),
promoCodeApplied: v.boolean(),
appliedpromotionsIds: v.array(v.number())}),v.metadata({cart: 'CartEntity',
product: 'ProductEntity',
variant: 'ProductVariantEntity',
affiliationLink: 'AffiliationLinkEntity'}))

export type TCreateCartItemsSchema = v.InferInput<typeof CreateCartItemsSchema>
